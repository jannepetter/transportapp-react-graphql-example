{"version":3,"sources":["graphql/queries/ROUTE.tsx","components/Route.tsx","components/RouteList.tsx","graphql/queries/AGENCY.tsx","App.tsx","index.tsx"],"names":["ROUTE","gql","Route","props","useState","showTrip","setShowTrip","routeInfo","useQuery","variables","id","route","gtfsId","toggleShowtrip","loading","onClick","longName","shortName","arr","routti","data","trips","time","seconds","hours","String","Math","floor","minutes","length","handleNames","name","part1","substring","toUpperCase","part2","toLowerCase","concat","stopBuilder","item","phase","stop","scheduledDeparture","scheduledArrival","className","map","t","key","shortid","generate","slice","s","showStops","stoptimes","RouteList","startingPoint","setStartingPoint","destination","setDestination","showRoutes","agency","routes","filter","trim","r","includes","onChange","e","target","value","placeholder","AGENCY","App","link","createHttpLink","uri","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5e4e5294.chunk.js","sourcesContent":["import gql from 'graphql-tag'\r\nexport const ROUTE = gql`\r\nquery route($id:String!){\r\n  route(id:$id){\r\n    trips {\r\n      stoptimes {\r\n        stop{\r\n          name\r\n          platformCode\r\n        }\r\n        scheduledArrival\r\n        scheduledDeparture\r\n        arrivalDelay\r\n      }\r\n    }\r\n  }\r\n}\r\n`","import React, { useState } from 'react'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport shortid from 'shortid'\r\nimport '../css/Route.css'\r\nimport {ROUTE} from '../graphql/queries/ROUTE'\r\n\r\ninterface Props {\r\n  route: any\r\n}\r\n\r\nconst Route: React.FC<Props> = (props) => {\r\n  const [showTrip, setShowTrip] = useState(false)\r\n  const routeInfo = useQuery(ROUTE, {\r\n    variables: { id: props.route.gtfsId }\r\n  })\r\n\r\n  const toggleShowtrip = () => {\r\n    setShowTrip(!showTrip)\r\n  }\r\n\r\n  if (!showTrip || routeInfo.loading) {\r\n    return (<div>\r\n      <span onClick={toggleShowtrip}>{`${props.route.longName} ${props.route.shortName}`}</span><br></br>\r\n    </div>)\r\n  }\r\n  const routti = routeInfo.data.route.trips\r\n\r\n  const time = (seconds: number) => {\r\n    let hours = String(Math.floor(seconds / (60 * 60))%24)\r\n    let minutes = String((seconds % (60 * 60)) / 60)\r\n    if (hours.length === 1) {\r\n      hours = '0' + hours\r\n    }\r\n    if (minutes.length === 1) {\r\n      minutes = '0' + minutes\r\n    }\r\n    return `${hours}:${minutes}`\r\n  }\r\n  const handleNames =(name:string)=>{\r\n    const part1=name.substring(0,1).toUpperCase()\r\n    const part2=name.substring(1).toLowerCase()\r\n    return part1.concat(part2)\r\n  }\r\n\r\n  const stopBuilder = (item: any, phase?: string) => {\r\n    if (phase === 'first') {\r\n      return `${handleNames(item.stop.name)} \\t leaving ${time(item.scheduledDeparture)}`\r\n    } else if (phase === 'last') {\r\n      return `${handleNames(item.stop.name)} \\t arrives ${time(item.scheduledArrival)}`\r\n    }\r\n    return `${handleNames(item.stop.name)} \\t arrives ${time(item.scheduledArrival)}, leaves ${time(item.scheduledDeparture)} `\r\n  }\r\n  const showStops = (arr: any[]) => {\r\n    return (<div className='stoplist' key={shortid.generate()}>\r\n      <li className='listItem'>{stopBuilder(arr[0],'first')}</li>\r\n      {arr.slice(1, arr.length - 1).map(s => <li className='listItem' key={shortid.generate()}>\r\n        {stopBuilder(s)}</li>)}\r\n        <li className='listItem'>{stopBuilder(arr[arr.length-1],'last')}</li>\r\n      <br></br>\r\n    </div>\r\n    )\r\n\r\n  }\r\n\r\n  const showTrips = (arr: any[]) => {\r\n    return (<div>\r\n      {arr.map(t => showStops(t.stoptimes))}\r\n    </div>\r\n    )\r\n  }\r\n  return (<div className='canvas'>\r\n    <span onClick={toggleShowtrip}>{`${props.route.longName} ${props.route.shortName}`}</span><br></br>\r\n    {showTrips(routti)}\r\n  </div>)\r\n}\r\nexport default Route","import React, { useState } from 'react'\r\nimport '../css/RouteList.css'\r\nimport Route from './Route'\r\ninterface Props {\r\n    agency: any\r\n}\r\n\r\nconst RouteList: React.FC<Props> = (props) => {\r\n    const [startingPoint,setStartingPoint]=useState('')\r\n    const [destination,setDestination]=useState('')\r\n\r\n    let showRoutes:any[]=[]\r\n    \r\n\r\n    if (props.agency.loading) {\r\n        return (<div>loading</div>)\r\n    }\r\n    const routes=props.agency.data.agency.routes\r\n    if(startingPoint.length>3 && destination.length>3){\r\n        const filter=startingPoint.trim().concat(` - ${destination.trim()}`)\r\n        showRoutes=routes.filter((r:any)=>r.longName.toLowerCase().includes(filter.toLowerCase()))\r\n    }\r\n\r\n\r\n    return (<div>\r\n        <div className='header'>\r\n        <input className='headerInput' onChange={(e)=>setStartingPoint(e.target.value)} placeholder='starting point'></input>\r\n        <span>to</span>\r\n        <input className='headerInput' onChange={(e)=>setDestination(e.target.value)} placeholder='destination'></input>\r\n        </div>\r\n        {showRoutes.map((r:any)=><Route key={r.gtfsId} route={r}></Route>)}\r\n\r\n</div>)\r\n}\r\nexport default RouteList","import gql from 'graphql-tag'\r\nexport const AGENCY = gql`\t\r\n{\r\n  agency(id:\"MATKA:VR\") {\r\n    routes{\r\n      gtfsId\r\n      longName\r\n      shortName\r\n    }\r\n  }\r\n}\r\n`","import React from 'react';\r\nimport { useQuery } from \"@apollo/react-hooks\"\r\nimport RouteList from './components/RouteList'\r\nimport {AGENCY} from './graphql/queries/AGENCY'\r\n\r\nconst App: React.FC = () => {\r\n  const agency = useQuery(AGENCY)\r\n  return (\r\n    <div >\r\n      <RouteList agency={agency}></RouteList>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react'\t\t\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'  \r\n\r\nimport { ApolloProvider } from '@apollo/react-hooks'\t//baseconfig\r\nimport { ApolloClient } from 'apollo-client'          //baseconfig\r\nimport { InMemoryCache } from 'apollo-cache-inmemory' //baseconfig\r\nimport { createHttpLink } from \"apollo-link-http\";\r\n\r\nconst link=createHttpLink({ \r\n    uri:'https://api.digitransit.fi/routing/v1/routers/finland/index/graphql'  \r\n}) \r\n\r\nconst client = new ApolloClient({\r\n  link,\r\n  cache: new InMemoryCache(),\r\n})\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <App />\r\n  </ApolloProvider>,\r\n  document.getElementById('root')) \r\n\r\n \r\n \r\n"],"sourceRoot":""}